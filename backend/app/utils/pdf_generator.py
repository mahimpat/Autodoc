from reportlab.lib.pagesizes import A4, letter
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_JUSTIFY
from reportlab.lib.colors import HexColor, black, blue
from reportlab.pdfgen import canvas
from io import BytesIO
import markdown
from datetime import datetime
import re

class AutoDocPDFGenerator:
    """PDF generator with AutoDoc branding and professional styling"""
    
    def __init__(self):
        self.styles = getSampleStyleSheet()
        self.setup_custom_styles()
        
    def setup_custom_styles(self):
        """Setup custom styles for AutoDoc branding"""
        
        # Title style with AutoDoc branding
        self.styles.add(ParagraphStyle(
            name='AutoDocTitle',
            parent=self.styles['Title'],
            fontSize=24,
            fontName='Helvetica-Bold',
            textColor=HexColor('#6366f1'),  # Indigo color
            spaceAfter=30,
            alignment=TA_CENTER
        ))
        
        # Heading styles
        self.styles.add(ParagraphStyle(
            name='AutoDocHeading1',
            parent=self.styles['Heading1'],
            fontSize=18,
            fontName='Helvetica-Bold',
            textColor=HexColor('#1e293b'),  # Dark slate
            spaceBefore=20,
            spaceAfter=12
        ))
        
        self.styles.add(ParagraphStyle(
            name='AutoDocHeading2',
            parent=self.styles['Heading2'],
            fontSize=14,
            fontName='Helvetica-Bold',
            textColor=HexColor('#334155'),  # Slate
            spaceBefore=16,
            spaceAfter=8
        ))
        
        # Body text
        self.styles.add(ParagraphStyle(
            name='AutoDocBody',
            parent=self.styles['Normal'],
            fontSize=11,
            fontName='Helvetica',
            textColor=HexColor('#475569'),
            alignment=TA_JUSTIFY,
            spaceAfter=12,
            leading=14
        ))
        
        # Code block style
        self.styles.add(ParagraphStyle(
            name='AutoDocCode',
            parent=self.styles['Normal'],
            fontSize=9,
            fontName='Courier',
            textColor=HexColor('#1e293b'),
            backColor=HexColor('#f8fafc'),
            borderColor=HexColor('#e2e8f0'),
            borderWidth=1,
            borderPadding=8,
            spaceAfter=12,
            leading=12
        ))
        
        # Footer style
        self.styles.add(ParagraphStyle(
            name='AutoDocFooter',
            parent=self.styles['Normal'],
            fontSize=8,
            fontName='Helvetica',
            textColor=HexColor('#64748b'),
            alignment=TA_CENTER
        ))

class AutoDocCanvas(canvas.Canvas):
    """Custom canvas with AutoDoc header and footer"""
    
    def __init__(self, *args, **kwargs):
        self.title = kwargs.pop('title', 'Document')
        canvas.Canvas.__init__(self, *args, **kwargs)
        
    def showPage(self):
        self._draw_header()
        self._draw_footer()
        canvas.Canvas.showPage(self)
        
    def _draw_header(self):
        """Draw AutoDoc header on each page"""
        self.saveState()
        self.setFont('Helvetica', 8)
        self.setFillColor(HexColor('#64748b'))
        
        # AutoDoc logo text in header
        header_text = f"AutoDoc - Generated Document: {self.title}"
        self.drawString(72, A4[1] - 36, header_text)
        
        # Header line
        self.setStrokeColor(HexColor('#e2e8f0'))
        self.setLineWidth(0.5)
        self.line(72, A4[1] - 45, A4[0] - 72, A4[1] - 45)
        
        self.restoreState()
        
    def _draw_footer(self):
        """Draw AutoDoc footer on each page"""
        self.saveState()
        self.setFont('Helvetica', 8)
        self.setFillColor(HexColor('#64748b'))
        
        # Page number
        page_num = f"Page {self._pageNumber}"
        self.drawRightString(A4[0] - 72, 36, page_num)
        
        # AutoDoc branding
        footer_text = f"Generated by AutoDoc • {datetime.now().strftime('%B %d, %Y')} • autodoc.ai"
        self.drawString(72, 36, footer_text)
        
        # Footer line
        self.setStrokeColor(HexColor('#e2e8f0'))
        self.setLineWidth(0.5)
        self.line(72, 50, A4[0] - 72, 50)
        
        self.restoreState()

def markdown_to_pdf(markdown_content: str, title: str = "Document", author: str = None) -> bytes:
    """Convert markdown content to PDF with AutoDoc branding"""
    
    # Create PDF buffer
    buffer = BytesIO()
    
    # Create document with custom canvas
    doc = SimpleDocTemplate(
        buffer,
        pagesize=A4,
        rightMargin=72,
        leftMargin=72,
        topMargin=72,
        bottomMargin=72,
        canvasmaker=lambda *args, **kwargs: AutoDocCanvas(*args, title=title, **kwargs)
    )
    
    # Initialize PDF generator
    generator = AutoDocPDFGenerator()
    story = []
    
    # Add title page
    story.append(Paragraph(title, generator.styles['AutoDocTitle']))
    story.append(Spacer(1, 20))
    
    # Add generation info
    generation_info = f"""
    <b>Generated by AutoDoc</b><br/>
    Document created: {datetime.now().strftime('%B %d, %Y at %I:%M %p')}<br/>
    """
    if author:
        generation_info += f"Author: {author}<br/>"
    generation_info += "Platform: autodoc.ai"
    
    story.append(Paragraph(generation_info, generator.styles['Normal']))
    story.append(Spacer(1, 40))
    
    # Convert markdown to HTML
    html_content = markdown.markdown(
        markdown_content, 
        extensions=['tables', 'fenced_code', 'codehilite']
    )
    
    # Parse HTML and convert to ReportLab elements
    story.extend(_parse_html_content(html_content, generator.styles))
    
    # Build PDF
    doc.build(story)
    
    # Return PDF bytes
    buffer.seek(0)
    return buffer.read()

def _parse_html_content(html_content: str, styles) -> list:
    """Parse HTML content and convert to ReportLab elements"""
    story = []
    
    # Split content by major elements
    lines = html_content.split('\n')
    current_paragraph = ""
    
    for line in lines:
        line = line.strip()
        if not line:
            if current_paragraph:
                story.append(Paragraph(current_paragraph, styles['AutoDocBody']))
                story.append(Spacer(1, 6))
                current_paragraph = ""
            continue
            
        # Handle headings
        if line.startswith('<h1>'):
            if current_paragraph:
                story.append(Paragraph(current_paragraph, styles['AutoDocBody']))
                current_paragraph = ""
            heading = _clean_html_tags(line)
            story.append(Spacer(1, 20))
            story.append(Paragraph(heading, styles['AutoDocHeading1']))
            story.append(Spacer(1, 12))
            
        elif line.startswith('<h2>'):
            if current_paragraph:
                story.append(Paragraph(current_paragraph, styles['AutoDocBody']))
                current_paragraph = ""
            heading = _clean_html_tags(line)
            story.append(Spacer(1, 16))
            story.append(Paragraph(heading, styles['AutoDocHeading2']))
            story.append(Spacer(1, 8))
            
        elif line.startswith('<h3>'):
            if current_paragraph:
                story.append(Paragraph(current_paragraph, styles['AutoDocBody']))
                current_paragraph = ""
            heading = _clean_html_tags(line)
            story.append(Spacer(1, 12))
            story.append(Paragraph(f"<b>{heading}</b>", styles['AutoDocBody']))
            story.append(Spacer(1, 6))
            
        # Handle code blocks
        elif line.startswith('<pre><code>') or line.startswith('<code>'):
            if current_paragraph:
                story.append(Paragraph(current_paragraph, styles['AutoDocBody']))
                current_paragraph = ""
            code = _clean_html_tags(line)
            story.append(Paragraph(code, styles['AutoDocCode']))
            story.append(Spacer(1, 12))
            
        # Handle lists
        elif line.startswith('<ul>') or line.startswith('<ol>'):
            continue
        elif line.startswith('<li>'):
            if current_paragraph:
                story.append(Paragraph(current_paragraph, styles['AutoDocBody']))
                current_paragraph = ""
            list_item = _clean_html_tags(line)
            story.append(Paragraph(f"• {list_item}", styles['AutoDocBody']))
            
        # Regular content
        else:
            cleaned_line = _clean_html_tags(line)
            if cleaned_line:
                current_paragraph += cleaned_line + " "
    
    # Add any remaining paragraph
    if current_paragraph:
        story.append(Paragraph(current_paragraph, styles['AutoDocBody']))
    
    return story

def _clean_html_tags(html_text: str) -> str:
    """Clean HTML tags and preserve basic formatting"""
    # Preserve some basic formatting
    html_text = html_text.replace('<strong>', '<b>')
    html_text = html_text.replace('</strong>', '</b>')
    html_text = html_text.replace('<em>', '<i>')
    html_text = html_text.replace('</em>', '</i>')
    
    # Remove other HTML tags
    clean_text = re.sub(r'<[^>]+>', '', html_text)
    return clean_text.strip()

def generate_document_pdf(document_content: str, title: str, author: str = None) -> bytes:
    """Main function to generate PDF from document content"""
    return markdown_to_pdf(document_content, title, author)